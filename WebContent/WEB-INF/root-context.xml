<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:mvc="http://www.springframework.org/schema/mvc"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:p="http://www.springframework.org/schema/p"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xmlns:task="http://www.springframework.org/schema/task"
       xsi:schemaLocation="http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc-3.1.xsd
        http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.1.xsd
        http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-3.1.xsd
        http://www.springframework.org/schema/task http://www.springframework.org/schema/task/spring-task-3.1.xsd
        http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-3.1.xsd">
    <!-- DB정도 암호화 -->
    <!-- 
        1. https://sourceforge.net/projects/jasypt/ 다운로드 후 bin파일  cmd
         - encrypt input="비번" password="복호화를 위한 키값" algorithm="PBEWITHMD5ANDDES"
         - 아웃풋 확인 
         - properties에 추가 jdbc.password=ENC(아웃풋)
         - 복호화를 위한 아래 3개 빈 추가 (암호화 할때 썼던 값들임) 
    -->
    <!-- 
    ASOG_ENCRYPTION_KEY >> 서버에 놓을 요소! 환경변수로 지정할 키 값 export ASOG_ENCRYPTION_KEY={진짜 키}가 필요
    eclipse에서는 환경변수 못 읽는다.
    1. project -> run configuration >> Enviroment >> ASOG_ENCRYPTION_KEY랑 그값 적용 ( 환경변수 설정할 수 있다는 것이다. )
    2. 혹은 전체 환경변수 추가 
    UNIX/LINUX의 경우에는 export ASOG_ENCRYPTION_KEY=키값
    Window의 경우에는 환경변수 ASOG_ENCRYPTION_KEY/키값 설정
    -->
  
   <!--
    ** 다 괜찮은데 : 리눅스에서 properties파일의 ENC를 제대로 못읽음 .java로 세팅
    ==>확인해보니  vi /etc/init.d/tomcat 여기서 설정해줘야 환경변수 인식 가능.
     -->
    <bean id="encryptorConfig" class="org.jasypt.encryption.pbe.config.EnvironmentPBEConfig">
      <property name="algorithm" value="PBEWithMD5AndDES" />
      <property name="passwordEnvName" value="ASOG_ENCRYPTION_KEY" />
    </bean>
   <bean id="encryptor" class="org.jasypt.encryption.pbe.StandardPBEStringEncryptor">
      <property name="config" ref="encryptorConfig" />
    </bean>
    <bean class="org.jasypt.spring31.properties.EncryptablePropertyPlaceholderConfigurer">
      <constructor-arg ref="encryptor" />
      <property name="locations">
        <list>
          <value>/WEB-INF/config/jdbc.properties</value>
        </list>
      </property>
    </bean>
    <!-- 디코딩 끝 -->
     
    <!-- jdbc:log4jdbc:mysql://localhost:3306/honbabzone -->
    <context:property-placeholder location="/WEB-INF/config/jdbc.properties"/>
    <bean id="dataSource" class="org.apache.commons.dbcp.BasicDataSource" destroy-method="close">
        <property name="driverClassName" value="${jdbc.driverClassName}" />
        <property name="url" value="${jdbc.url}" />
        <property name="username" value="${jdbc.username}" />
        <property name="password" value="${jdbc.password}" />
        <property name="maxActive" value="30" />
        <property name="maxIdle" value="10" />
        <property name="maxWait" value="1000" />
        <property name="defaultAutoCommit" value="true" />
    </bean>

    <bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="dataSource" />
        
    </bean>
   
    <!--
    * 만약 JAVA 파일에서 뭔가를 처리해주고 빈 등록을 하고싶을 경우!!!!! 
    <context:component-scan base-package="hello.ContextDataSource" />
    <bean class="hello.ContextDataSource"/>
    -->
    <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
        <property name="dataSource" ref="dataSource" />
        <property name="configLocation" value="classpath:sqlMap/mybatis_config.xml" />
    </bean>
    <bean id="sqlSessionTemplate" class="org.mybatis.spring.SqlSessionTemplate">
        <constructor-arg ref="sqlSessionFactory" />
    </bean>
    
    <!-- 스케쥴러 -->
    <task:annotation-driven />
    
    <!-- <bean id="myjob" class="hello.Job" />
    <bean name="dummyJob" class="org.springframework.scheduling.quartz.JobDetailFactoryBean"
          p:jobClass="hello.JobDetail"
          p:durability="true">
        <property name="jobDataAsMap">
            <map>
                <entry key="myjob" value-ref="myjob"/>
            </map>
        </property>
    </bean>
    <bean id="cronTrigger" class="org.springframework.scheduling.quartz.CronTriggerFactoryBean"
          p:jobDetail-ref="dummyJob"
          p:startDelay="1000"
          p:cronExpression="0/3 * * * * ?"/>
 
    <bean id="schedulerFactoryBean" class="org.springframework.scheduling.quartz.SchedulerFactoryBean">
        <property name="triggers">
            <list>
                <ref bean="cronTrigger"/>
            </list>
        </property>
    </bean> -->
    
    <!-- 필터 테스트 -->
    <bean id="corsFilter" class="services.util.FilterChain" />
</beans>
