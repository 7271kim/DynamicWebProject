<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>
    <groupId>DynamicWebProject</groupId>
    <artifactId>DynamicWebProject</artifactId>
    <version>0.0.1-SNAPSHOT</version>
    <packaging>war</packaging>
    <name>Jin</name>
    <description>For study</description>
    <!-- 여기 하위부터 추가된 부분 -->

    <!-- 1. 각기 모듈화된 프로젝트 필요한 부분    -->
    <!--     
    <modules>
             <module></module>
    </modules> 
    -->
    
     <!-- 2. 프로젝트에서 사용할 Maven 글로벌 변수    -->
     <!-- 2020.10.02 최신은 5.1.0  -->
     <!-- gson이 톰캣 1.8, java 1.8에 돌아감... -->
    <properties>
        <java.version>1.8.0</java.version>
        <jdk.level>1.8</jdk.level>
        <org.springframework-version>5.1.0.RELEASE</org.springframework-version>
        <log4j2.version>2.13.3</log4j2.version>
    </properties>
    
    <!-- 3. 저장소 설정 -->
    <!-- repo path =  "{groupId}/{artifactId}/{version}/{jar file name}"  -->
    <repositories> 
        <repository> 
                <id>central</id> 
                <url>https://repo1.maven.org/maven2/</url> 
         </repository> 
    </repositories>
    
    <!-- 4. 특정 메이븐 프로파일 부분 설정 -->
    <!-- 
    <profiles>
        <profile>
            <id>autoInstallPackage</id>
            <modules>
                <module>bundlesp5/news</module>
                <module>bundlesp5/gnb</module>
                <module>bundlesp5/common-global-service</module>
                <module>bundlesp5/product</module>
                <module>bundlesp5/product-sec</module>
                <module>bundlesp5/admin</module>
                <module>bundlesp5/offer</module>
                <module>bundlesp5/support</module>
                <module>bundlesp5/ir</module>
                <module>bundlesp5/support-jp</module>
                <module>bundlesp5/tvblog</module>
                <module>bundles/shop</module>
                <module>bundles/us</module>
                <module>ui.apps</module>
            </modules>
        </profile>
    </profiles> 
    -->
    <!-- 5. 의존성 관리 -->
   <!--
    dependencyManagement 태그는 하위 모듈에서 사용할 버전들을 명시한다.
       여기에 적어놓으면 자식 POM에서 버전을 명기하지 않아도 디펜던시를 참조할 수있다.
   <dependencyManagement>
        <dependencies>
            <dependency>
                <groupId>log4j</groupId>
                <artifactId>log4j</artifactId>
                <version>1.2.17</version>
            </dependency>
             <dependency>
                <groupId>junit</groupId>
                <artifactId>junit</artifactId>
                <version>4.7</version>
                <scope>test</scope>
            </dependency>   
        </dependencies>
    </dependencyManagement> 
    -->
    <dependencies>
         <!-- Spring아닌  기본 써블릿 써보기 위해서 -->
        <dependency>
            <groupId>javax.servlet</groupId>
            <artifactId>javax.servlet-api</artifactId>
            <version>4.0.1</version>
            <scope>provided</scope>
        </dependency>
        <!-- StringUtils.join()사용하기위해 -->
        <dependency>
            <groupId>org.apache.commons</groupId>
            <artifactId>commons-lang3</artifactId>
            <version>3.6</version>
        </dependency>
        
        <!-- Spring 사용시 -->
        <!-- 이제  MVC 패턴 가능 -->
        <dependency>
            <groupId>org.springframework</groupId>
            <artifactId>spring-webmvc</artifactId>
            <version>${org.springframework-version}</version>
        </dependency>
        
        <!-- JSP에서 JSTL사용하기 위해 -->
        <dependency>
            <groupId>jstl</groupId>
            <artifactId>jstl</artifactId>
            <version>1.2</version>
        </dependency>
        
        <!-- DB관련 -->
        <dependency>
            <groupId>org.springframework</groupId>
            <artifactId>spring-jdbc</artifactId>
            <version>${org.springframework-version}</version>
        </dependency>
        <dependency>
            <groupId>mysql</groupId>
            <artifactId>mysql-connector-java</artifactId>
            <version>8.0.28</version>
        </dependency>
        <dependency>
            <groupId>org.mybatis</groupId>
            <artifactId>mybatis</artifactId>
            <version>3.2.8</version>
        </dependency>
        <dependency>
            <groupId>org.mybatis</groupId>
            <artifactId>mybatis-spring</artifactId>
            <version>1.2.2</version>
        </dependency>
        <dependency>
            <groupId>commons-dbcp</groupId>
            <artifactId>commons-dbcp</artifactId>
            <version>1.4</version>
        </dependency>
        <!-- DB - log4j2 연결 -->
        <dependency>
            <groupId>org.bgee.log4jdbc-log4j2</groupId>
            <artifactId>log4jdbc-log4j2-jdbc4.1</artifactId>
            <version>1.16</version>
        </dependency>
        
        <!-- DB정보 암호화 관련 -->
        <dependency>  
            <groupId>org.jasypt</groupId>
            <artifactId>jasypt-spring31</artifactId>
            <version>1.9.2</version>
            <scope>compile</scope>
        </dependency>  
        
        <!-- log관련 -->
        <dependency>
            <groupId>org.apache.logging.log4j</groupId>
            <artifactId>log4j-core</artifactId>
            <version>${log4j2.version}</version>
        </dependency>
        <dependency>
            <groupId>org.apache.logging.log4j</groupId>
            <artifactId>log4j-api</artifactId>
            <version>${log4j2.version}</version>
        </dependency>
        <dependency>
            <groupId>org.apache.logging.log4j</groupId>
            <artifactId>log4j-web</artifactId>
            <version>${log4j2.version}</version>
        </dependency>
        
        <!-- 내 라이브러리 -->
        <dependency>
            <groupId>com.seokjinkim</groupId>
            <artifactId>makelibrary</artifactId>
            <version>0.0.2</version>
        </dependency>
        
        <!-- 자동 Getter Setter -->
        <!-- 
          Download된 jar파일 위치로 가서 해당 jar 실행.
           >> 이클립스 겁색 >> 지금사용하고 있는 이클립스.exe 찾기 >> 이클립스 재실행
        -->
      <!--  <dependency> 
            <groupId>org.projectlombok</groupId>
            <artifactId>lombok</artifactId>
            <version>1.16.16</version>
        </dependency> -->
        
        <!-- 스케쥴러 사용을 위한 pom -->
        <!-- <dependency>
            <groupId>org.quartz-scheduler</groupId>
            <artifactId>quartz</artifactId>
            <version>2.3.0</version>
        </dependency>
        <dependency>
            <groupId>org.springframework</groupId>
            <artifactId>spring-context-support</artifactId>
            <version>${org.springframework-version}</version>
        </dependency>
        <dependency>
            <groupId>org.springframework</groupId>
            <artifactId>spring-tx</artifactId>
            <version>${org.springframework-version}</version>
        </dependency> -->
    </dependencies>
    
    <!-- 배포환경구성 -->
    <build>
        <sourceDirectory>src</sourceDirectory>
        <resources>
            <resource>
                <directory>src</directory>
                <filtering>true</filtering>
                <excludes>
                    <exclude>**/*.java</exclude>
                </excludes>
            </resource>
        </resources>
        <plugins>
        <!-- 
        * 플러그인 명명 규칙 mvn groupId:artifactId:version:goal
         : 저장소에 있는 가장 최신 버전의 플러그인사용시 version 생략가능
         : artifactId가 'maven-$name-plugin' 과 '$name-maven-plugin' 규칠을 따른다면 groupId:$name:goal 형식으로 실행할 수 있다.
         : groupId 목록을 settings.xml에서 관리한다면 생략가능 
         : org.apache.maven.plugins와 org.codehaus.mojo은 기본 groupId이라 생략 가능
         
         -->
            <plugin>
                <artifactId>maven-compiler-plugin</artifactId>
                <version>3.8.0</version>
                <configuration>
                    <source>${jdk.level}</source>
                    <target>${jdk.level}</target>
                    <encoding>UTF-8</encoding>
                </configuration>
            </plugin>
            <plugin>
                <artifactId>maven-war-plugin</artifactId>
                <version>3.2.1</version>
                <configuration>
                    <warSourceDirectory>WebContent</warSourceDirectory>
                </configuration>
            </plugin>
            <!-- 
              **일반 톰캣 배포
              1. vi /usr/local/tomcat8/conf/tomcat-users.xml
              user username에 유저와 아이디 설정 
              
              2. org.apache.tomcat.maven
              mvn \-\-(데쉬데쉬)encrypt-master-password 비밀번호
              {비번}
              3.settings-security.xml을 만들기
              - 비밀번호 나온것 .m2/settings-security.xml 하단 내용 추가
               <settingsSecurity>
                  <master>{내용나온것}</master>
               </settingsSecurity>
               
              4. Server암호 받기 
               mvn (데쉬데쉬)encrypt-password <password>
               - /.m2/settings.xml 여기 Profile부분에 속성값 추가 
               -  하단에 적기
                <server>
                  <id>gogoD</id>
                  <username>my_username</username>
                  <password>my_password</password>
                </server>
                
                - settings.xml에 Profile도 추가 
               <profile>
                    <id>deployD</id>
                    <properties>
                        <tomcat.deploy.url>url</tomcat.deploy.url>
                    </properties>
                </profile>
              5. POM 아래 플러그인 configuration에 server추가
              6. 배포 
              mvn clean tomcat7:deploy -PdeployD
              (재배포시 - 재실행 필요없음)
              mvn clean tomcat7:redeploy -PdeployD
              -->
            <plugin>
               <groupId>org.apache.tomcat.maven</groupId>
               <artifactId>tomcat7-maven-plugin</artifactId>
               <version>2.2</version>
               <configuration>
                  <server>gogoD</server>
                  <url>${tomcat.deploy.url}</url>
                  <!-- <username>git</username>
                  <password>${password}</password> -->
               </configuration>
            </plugin>
        </plugins>
      
        
    </build>
</project>